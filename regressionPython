#!/usr/bin/env python
import linecache as lc
import tensorflow as tf

a = tf.Variable([.3], dtype=tf.float32)
b = tf.Variable([-.3], dtype=tf.float32)
x = tf.placeholder(tf.float32)
regressionModel = a * x + b
y = tf.placeholder(tf.float32)

loss = tf.reduce_sum(tf.square(regressionModel - y))
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(loss)

count = len(open('daneAI.txt', 'rU').readlines())

x_array = []
y_array = []

for i in range (1, count):
	line = lc.getline('daneAI.txt', i)
	row = line.split(",")
	pom = float(row[1]) * 18 + 18
	#x_array.append(float(row[1]))
	#y_array.append(float(row[6]))
	x_array.append(float(i))
	y_array.append(float(i))
	
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)
for i in range(10000):
  sess.run(train, {x: x_array, y: y_array})

currA, currB, currLoss = sess.run([a, b, loss], {x: x_array, y: y_array})
print("y = %s * x + %s | loss: %s"%(currA, currB, currLoss))
